
@misc{taht_flow_2018,
	title = {The {Flow} {Queue} {CoDel} {Packet} {Scheduler} and {Active} {Queue} {Management} {Algorithm}},
	url = {https://tools.ietf.org/html/rfc8290},
	language = {en},
	urldate = {2019-10-11},
	author = {Taht, D. and Gettys, Jim and Hoeiland-Joergensen, T. and Hoeiland-Joergensen, Toke and Dumazet, Eric and Gettys, J. and Dumazet, E. and McKenney, P.},
	year = {2018},
	file = {Snapshot:/home/max/.zotero/zotero/zzt443zn.default/zotero/storage/FNJA66W6/rfc8290.html:text/html}
}

@inproceedings{hoiland-jorgensen_piece_2018,
	title = {Piece of {CAKE}: {A} {Comprehensive} {Queue} {Management} {Solution} for {Home} {Gateways}},
	shorttitle = {Piece of {CAKE}},
	abstract = {The last several years has seen a renewed interest in smart queue management to curb excessive network queueing delay, as people have realised the prevalence of bufferbloat in real networks. However, for an effective deployment at today's last mile connections, an improved queueing algorithm is not enough in itself, as often the bottleneck queue is situated in legacy systems that cannot be upgraded. In addition, features such as per-user fairness and the ability to de-prioritise background traffic are often desirable in a home gateway.In this paper we present Common Applications Kept Enhanced (CAKE), a comprehensive network queue management system designed specifically for home Internet gateways. CAKE packs several compelling features into an integrated solution, thus easing deployment. These features include: bandwidth shaping with overhead compensation for various link layers; reasonable DiffServ handling; improved flow hashing with both per-flow and per-host queueing fairness; and filtering of TCP ACKs. Our evaluation shows that these features offer compelling advantages, and that CAKE has the potential to significantly improve performance of last-mile internet connections.},
	booktitle = {2018 {IEEE} {International} {Symposium} on {Local} and {Metropolitan} {Area} {Networks} ({LANMAN})},
	author = {Høiland-Jørgensen, T. and Täht, D. and Morton, J.},
	month = jun,
	year = {2018},
	keywords = {telecommunication traffic, Bandwidth, Internet, transport protocols, Kernel, Linux, queueing theory, CAKE, Clocks, compelling features, comprehensive network queue management system, comprehensive queue management solution, de-prioritise background traffic, Diffserv networks, effective deployment, excessive network queueing delay, Hardware, home gateway, home Internet gateways, improved flow hashing, improved queueing algorithm, integrated solution, internetworking, last-mile internet connections, legacy systems, Logic gates, mile connections, per-host queueing fairness, per-user fairness, renewed interest, smart queue management},
	pages = {37--42},
	file = {IEEE Xplore Abstract Record:/home/max/.zotero/zotero/zzt443zn.default/zotero/storage/3V5A49NP/8475045.html:text/html;IEEE Xplore Full Text PDF:/home/max/.zotero/zotero/zzt443zn.default/zotero/storage/X9HL66HL/Høiland-Jørgensen et al. - 2018 - Piece of CAKE A Comprehensive Queue Management So.pdf:application/pdf}
}

@article{nichols_controlling_2012,
	title = {Controlling {Queue} {Delay}},
	volume = {10},
	issn = {1542-7730},
	abstract = {A modern AQM is just one piece of the solution to bufferbloat.},
	number = {5},
	urldate = {2019-10-11},
	journal = {Queue},
	author = {Nichols, Kathleen and Jacobson, Van},
	month = may,
	year = {2012},
	pages = {20:20--20:34},
	file = {ACM Full Text PDF:/home/max/.zotero/zotero/zzt443zn.default/zotero/storage/2FVMF4WS/Nichols and Jacobson - 2012 - Controlling Queue Delay.pdf:application/pdf}
}

@article{cardwell_bbr:_2016,
	title = {{BBR}: {Congestion}-{Based} {Congestion} {Control}},
	volume = {14, September-October},
	shorttitle = {{BBR}},
	urldate = {2019-10-11},
	journal = {ACM Queue},
	author = {Cardwell, Neal and Cheng, Yuchung and Gunn, C. Stephen and Yeganeh, Soheil Hassas and Jacobson, Van},
	year = {2016},
	pages = {20 -- 53}
}

@article{ha_cubic:_2008,
	title = {{CUBIC}: a new {TCP}-friendly high-speed {TCP} variant},
	volume = {42},
	issn = {01635980},
	shorttitle = {{CUBIC}},
	abstract = {CUBIC is a congestion control protocol for TCP (transmission control protocol) and the current default TCP algorithm in Linux. The protocol modiﬁes the linear window growth function of existing TCP standards to be a cubic function in order to improve the scalability of TCP over fast and long distance networks. It also achieves more equitable bandwidth allocations among ﬂows with diﬀerent RTTs (round trip times) by making the window growth to be independent of RTT – thus those ﬂows grow their congestion window at the same rate. During steady state, CUBIC increases the window size aggressively when the window is far from the saturation point, and the slowly when it is close to the saturation point. This feature allows CUBIC to be very scalable when the bandwidth and delay product of the network is large, and at the same time, be highly stable and also fair to standard TCP ﬂows. The implementation of CUBIC in Linux has gone through several upgrades. This paper documents its design, implementation, performance and evolution as the default TCP algorithm of Linux.},
	language = {en},
	number = {5},
	urldate = {2019-10-11},
	journal = {ACM SIGOPS Operating Systems Review},
	author = {Ha, Sangtae and Rhee, Injong and Xu, Lisong},
	month = jul,
	year = {2008},
	pages = {64--74},
	file = {Ha et al. - 2008 - CUBIC a new TCP-friendly high-speed TCP variant.pdf:/home/max/.zotero/zotero/zzt443zn.default/zotero/storage/KZ4Z69S2/Ha et al. - 2008 - CUBIC a new TCP-friendly high-speed TCP variant.pdf:application/pdf}
}

@article{dong_pcc:_2015,
	title = {{PCC}: {Re}-architecting {Congestion} {Control} for {Consistent} {High} {Performance}},
	abstract = {TCP and its variants have suffered from surprisingly poor performance for decades. We argue the TCP family has little hope of achieving consistent high performance due to a fundamental architectural deﬁciency: hardwiring packet-level events to control responses. We propose Performance-oriented Congestion Control (PCC), a new congestion control architecture in which each sender continuously observes the connection between its actions and empirically experienced performance, enabling it to consistently adopt actions that result in high performance. We prove that PCC converges to a stable and fair equilibrium. Across many real-world and challenging environments, PCC shows consistent and often 10× performance improvement, with better fairness and stability than TCP. PCC requires no router hardware support or new packet format.},
	language = {en},
	author = {Dong, Mo and Li, Qingxi and Zarchy, Doron and Godfrey, P Brighten and Schapira, Michael},
	year = {2015},
	pages = {15},
	file = {Dong et al. - PCC Re-architecting Congestion Control for Consis.pdf:/home/max/.zotero/zotero/zzt443zn.default/zotero/storage/39XKM8WX/Dong et al. - PCC Re-architecting Congestion Control for Consis.pdf:application/pdf}
}

@article{dong_pcc_2018,
	title = {{PCC} {Vivace}: {Online}-{Learning} {Congestion} {Control}},
	abstract = {TCP’s congestion control architecture suffers from notoriously bad performance. Consequently, recent years have witnessed a surge of interest in both academia and industry in novel approaches to congestion control. We show, however, that past approaches fall short of attaining ideal performance. We leverage ideas from the rich literature on online (convex) optimization in machine learning to design Vivace, a novel rate-control protocol, designed within the recently proposed PCC framework. Our theoretical and experimental analyses establish that Vivace signiﬁcantly outperforms traditional TCP variants, the previous realization of the PCC framework, and BBR in terms of performance (throughput, latency, loss), convergence speed, alleviating bufferbloat, reactivity to changing network conditions, and friendliness towards legacy TCP in a range of scenarios. Vivace requires only sender-side changes and is thus readily deployable.},
	language = {en},
	author = {Dong, Mo and Meng, Tong and Zarchy, Doron and Arslan, Engin and Gilad, Yossi and Godfrey, P Brighten and Schapira, Michael},
	year = {2018},
	pages = {15},
	file = {Dong et al. - PCC Vivace Online-Learning Congestion Control.pdf:/home/max/.zotero/zotero/zzt443zn.default/zotero/storage/HIFMYRRL/Dong et al. - PCC Vivace Online-Learning Congestion Control.pdf:application/pdf}
}

@article{shreedhar_efficient_1996,
	title = {Efficient fair queuing using deficit round-robin},
	volume = {4},
	abstract = {Fair queuing is a technique that allows each flow passing through a network device to have a fair share of network resources. Previous schemes for fair queuing that achieved nearly perfect fairness were expensive to implement; specifically, the work required to process a packet in these schemes was O(log(n)), where n is the number of active flows. This is expensive at high speeds. On the other hand, cheaper approximations of fair queuing reported in the literature exhibit unfair behavior. In this paper, we describe a new approximation of fair queuing, that we call deficit round-robin. Our scheme achieves nearly perfect fairness in terms of throughput, requires only O(1) work to process a packet, and is simple enough to implement in hardware. Deficit round-robin is also applicable to other scheduling problems where servicing cannot be broken up into smaller units (such as load balancing) and to distributed queues.},
	number = {3},
	journal = {IEEE/ACM Transactions on Networking},
	author = {Shreedhar, M. and Varghese, G.},
	month = jun,
	year = {1996},
	keywords = {Throughput, Computer networks, Computer science, queueing theory, active flows, Circuits, deficit round-robin, distributed queues, efficient fair queuing, hardware, high speeds, Insulation, load balancing, Load management, nearly perfect fairness, network device, network resources, Operating systems, packet switching, Process control, Processor scheduling, Resource management, scheduling, scheduling problems, stochastic process, stochastic processes, throughput, unfair behavior},
	pages = {375--385},
	file = {IEEE Xplore Abstract Record:/home/max/.zotero/zotero/zzt443zn.default/zotero/storage/7J3AZ99I/502236.html:text/html;IEEE Xplore Full Text PDF:/home/max/.zotero/zotero/zzt443zn.default/zotero/storage/SJ8KT5YD/Shreedhar and Varghese - 1996 - Efficient fair queuing using deficit round-robin.pdf:application/pdf}
}

@inproceedings{jacobson_congestion_1988,
	address = {New York, NY, USA},
	series = {{SIGCOMM} '88},
	title = {Congestion {Avoidance} and {Control}},
	isbn = {978-0-89791-279-2},
	abstract = {In October of '86, the Internet had the first of what became a series of 'congestion collapses'. During this period, the data throughput from LBL to UC Berkeley (sites separated by 400 yards and three IMP hops) dropped from 32 Kbps to 40 bps. Mike Karels1 and I were fascinated by this sudden factor-of-thousand drop in bandwidth and embarked on an investigation of why things had gotten so bad. We wondered, in particular, if the 4.3BSD (Berkeley UNIX) TCP was mis-behaving or if it could be tuned to work better under abysmal network conditions. The answer to both of these questions was “yes”.
Since that time, we have put seven new algorithms into the 4BSD TCP:

round-trip-time variance estimation
exponential retransmit timer backoff
slow-start
more aggressive receiver ack policy
dynamic window sizing on congestion
Karn's clamped retransmit backoff
fast retransmit Our measurements and the reports of beta testers suggest that the final product is fairly good at dealing with congested conditions on the Internet.

This paper is a brief description of (i) - (v) and the rationale behind them. (vi) is an algorithm recently developed by Phil Karn of Bell Communications Research, described in [KP87]. (viii) is described in a soon-to-be-published RFC.
Algorithms (i) - (v) spring from one observation: The flow on a TCP connection (or ISO TP-4 or Xerox NS SPP connection) should obey a 'conservation of packets' principle. And, if this principle were obeyed, congestion collapse would become the exception rather than the rule. Thus congestion control involves finding places that violate conservation and fixing them.
By 'conservation of packets' I mean that for a connection 'in equilibrium', i.e., running stably with a full window of data in transit, the packet flow is what a physicist would call 'conservative': A new packet isn't put into the network until an old packet leaves. The physics of flow predicts that systems with this property should be robust in the face of congestion. Observation of the Internet suggests that it was not particularly robust. Why the discrepancy?
There are only three ways for packet conservation to fail:

The connection doesn't get to equilibrium, or
A sender injects a new packet before an old packet has exited, or
The equilibrium can't be reached because of resource limits along the path. In the following sections, we treat each of these in turn.},
	urldate = {2019-10-11},
	booktitle = {Symposium {Proceedings} on {Communications} {Architectures} and {Protocols}},
	publisher = {ACM},
	author = {Jacobson, V.},
	year = {1988},
	pages = {314--329},
	file = {ACM Full Text PDF:/home/max/.zotero/zotero/zzt443zn.default/zotero/storage/XH5JAPDS/Jacobson - 1988 - Congestion Avoidance and Control.pdf:application/pdf}
}

@misc{natarajan_proportional_2016,
	title = {Proportional {Integral} {Controller} {Enhanced} ({PIE}): {A} {Lightweight} {Control} {Scheme} to {Address} the {Bufferbloat} {Problem}},
	shorttitle = {Proportional {Integral} {Controller} {Enhanced} ({PIE})},
	url = {https://tools.ietf.org/html/rfc8033},
	language = {en},
	urldate = {2019-10-11},
	author = {Natarajan, Preethi and White, Greg and Pan, Rong and Baker, Fred},
	year = {2016},
	file = {Snapshot:/home/max/.zotero/zotero/zzt443zn.default/zotero/storage/34UFAFDA/rfc8033.html:text/html}
}

@misc{dumazet_pkt_sched:_2013,
	title = {pkt\_sched: fq: {Fair} {Queue} packet scheduler [{LWN}.net]},
	url = {https://lwn.net/Articles/565421/},
	urldate = {2019-10-11},
	author = {Dumazet, Eric},
	year = {2013},
	file = {pkt_sched\: fq\: Fair Queue packet scheduler [LWN.net]:/home/max/.zotero/zotero/zzt443zn.default/zotero/storage/GM39QQTK/565421.html:text/html}
}

@misc{vormayr_cn-tu/py-virtnet_2017,
	title = {{CN}-{TU}/py-virtnet},
	url = {https://github.com/CN-TU/py-virtnet},
	abstract = {Network emulation library for Python. CN contact: Gernot Vormayr - CN-TU/py-virtnet},
	language = {en},
	urldate = {2019-10-11},
	journal = {GitHub},
	author = {Vormayr, Gernot},
	year = {2017},
	file = {Snapshot:/home/max/.zotero/zotero/zzt443zn.default/zotero/storage/UGY9XPRD/py-virtnet.html:text/html}
}

@misc{kuhlewind_quic_2018,
	title = {The {QUIC} {Latency} {Spin} {Bit}},
	url = {https://tools.ietf.org/html/draft-ietf-quic-spin-exp-01},
	language = {en},
	urldate = {2019-10-11},
	author = {Kühlewind, Mirja and Trammell, Brian},
	year = {2018},
	file = {Snapshot:/home/max/.zotero/zotero/zzt443zn.default/zotero/storage/YN93XHX3/draft-ietf-quic-spin-exp-01.html:text/html}
}

@misc{borman_tcp_2014,
	title = {{TCP} {Extensions} for {High} {Performance}},
	url = {https://tools.ietf.org/html/rfc7323},
	language = {en},
	urldate = {2019-10-11},
	author = {Borman, David and Scheffenegger, Richard and Jacobson, Van},
	year = {2014},
	file = {Snapshot:/home/max/.zotero/zotero/zzt443zn.default/zotero/storage/VGHJAN2F/rfc7323.html:text/html}
}

@misc{thomson_quic:_2019,
	title = {{QUIC}: {A} {UDP}-{Based} {Multiplexed} and {Secure} {Transport}},
	shorttitle = {{QUIC}},
	url = {https://tools.ietf.org/html/draft-ietf-quic-transport-23},
	language = {en},
	urldate = {2019-10-11},
	author = {Thomson, Martin and Iyengar, Jana},
	year = {2019},
	file = {Snapshot:/home/max/.zotero/zotero/zzt443zn.default/zotero/storage/GBYWSFYJ/draft-ietf-quic-transport-23.html:text/html}
}

@article{cardwell_bbr_2019,
	title = {{BBR} v2: {A} {Model}-based {Congestion} {Control} {IETF} 105 {Update}},
	language = {en},
	author = {Cardwell, Neal and Cheng, Yuchung and Yeganeh, Soheil Hassas and Jha, Priyaranjan and Seung, Yousuk and Swett, Ian and Vasiliev, Victor and Wu, Bin and Mathis, Matt and Jacobson, Van},
	year = {2019},
	pages = {21},
	file = {Cardwell et al. - BBR v2 A Model-based Congestion Control IETF 105 .pdf:/home/max/.zotero/zotero/zzt443zn.default/zotero/storage/R47FWS7V/Cardwell et al. - BBR v2 A Model-based Congestion Control IETF 105 .pdf:application/pdf}
}

@article{cardwell_bbr_2019-1,
	title = {{BBR} v2 {A} {Model}-based {Congestion} {Control} {IETF} 104},
	language = {en},
	author = {Cardwell, Neal and Cheng, Yuchung and Yeganeh, Soheil Hassas and Swett, Ian and Vasiliev, Victor and Jha, Priyaranjan and Seung, Yousuk and Mathis, Matt and Jacobson, Van},
	year = {2019},
	pages = {36},
	file = {Cardwell et al. - BBR v2 A Model-based Congestion Control.pdf:/home/max/.zotero/zotero/zzt443zn.default/zotero/storage/YVANN8KW/Cardwell et al. - BBR v2 A Model-based Congestion Control.pdf:application/pdf}
}

@article{brakmo_tcp_1995,
	title = {{TCP} {Vegas}: end to end congestion avoidance on a global {Internet}},
	volume = {13},
	issn = {0733-8716, 1558-0008},
	shorttitle = {{TCP} {Vegas}},
	abstract = {Vegas is an implementation of TCP that achieves between 37 and 71\% better throughput on the Internet, with one-fifth to one-half the losses, as compared to the implementation of TCP in the Reno distribution of BSD Unix. This paper motivates and describes the three key techniques employed by Vegas, and presents the results of a comprehensive experimental performance study, using both simulations and measurements on the Internet, of the Vegas and Reno implementations of TCP.{\textless}{\textgreater}},
	number = {8},
	journal = {IEEE Journal on Selected Areas in Communications},
	author = {Brakmo, L.S. and Peterson, L.L.},
	month = oct,
	year = {1995},
	keywords = {Protocols, Throughput, Bandwidth, Internet, transport protocols, telecommunication congestion control, Testing, Computer science, throughput, Adaptive control, BSD Unix, end to end congestion avoidance, experimental performance stud, global Internet, Jacobian matrices, measurements, performance evaluation, Programmable control, Reno distribution, simulations, TCP Vegas, TCPIP, Unix},
	pages = {1465--1480},
	file = {IEEE Xplore Abstract Record:/home/max/.zotero/zotero/zzt443zn.default/zotero/storage/EX4ZY2N4/464716.html:text/html;IEEE Xplore Full Text PDF:/home/max/.zotero/zotero/zzt443zn.default/zotero/storage/A945PIYJ/Brakmo and Peterson - 1995 - TCP Vegas end to end congestion avoidance on a gl.pdf:application/pdf}
}

@inproceedings{bless_policy-oriented_2018,
	title = {Policy-oriented {AQM} {Steering}},
	abstract = {Detecting and handling network congestion in the Internet has, again, become a vital area of research. The provisioning of low latency together with high throughput is of particular interest due to the current mix of applications running in the Internet. Active Queue Management (AQM) mechanisms come with the promise of reducing queuing delays. They, however, may adversely affect throughput and network utilization and have proven to be difficult to configure. More recent AQMs, such as CoDel, PIE, and GSP are easier to configure but work with a fixed target delay setpoint. Depending on the traffic the same setpoint value can result either in unnecessary large delays or under-utilization of the link. Policy-oriented AQM Steering automatically adapts the target delay setpoint to the current traffic situation, in order to fulfill a given quality-of-service policy. Such a policy consists of a utilization goal and an upper delay bound. This improves AQM performance with varying traffic situations and makes the impact of deploying an AQM predictable. A prototypical implementation of AQM Steering for GSP showed its performance advantages compared to static AQM variants at speeds of 10 Gbit/s and 1 Gbit/s.},
	booktitle = {2018 {IFIP} {Networking} {Conference} ({IFIP} {Networking}) and {Workshops}},
	author = {Bless, Roland and Hock, Mario and Zitterbart, Martina},
	month = may,
	year = {2018},
	keywords = {Active Queue Management mechanisms, Bandwidth, CoDel, Delays, fixed target delay setpoint, GSP, Internet, network congestion, network utilization, Packet loss, PIE, policy-oriented AQM Steering, quality of service, quality-of-service policy, queueing theory, queuing delays, static AQM variants, synchronisation, telecommunication network management, Throughput, traffic situation, Upper bound},
	pages = {1--9},
	file = {IEEE Xplore Abstract Record:/home/max/.zotero/zotero/zzt443zn.default/zotero/storage/RLFMJX3W/8696627.html:text/html;IEEE Xplore Full Text PDF:/home/max/.zotero/zotero/zzt443zn.default/zotero/storage/3VSPBH8H/Bless et al. - 2018 - Policy-oriented AQM Steering.pdf:application/pdf}
}